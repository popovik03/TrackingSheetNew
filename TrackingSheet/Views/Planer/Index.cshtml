<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/handsontable@latest/dist/handsontable.full.min.css" rel="stylesheet">
    <style>
        .highlighted {
            background-color: #ffeb3b; /* Желтый цвет для выделения изменений */
        }

        .handsontable th, .handsontable td {
            border: 1px solid #ddd;
            /* Убедитесь, что высота строк фиксирована */
        }

        .main {
            height: 95vh; /* Высота родительского элемента */
            display: flex;
            flex-direction: column;
        }

        #handsontable-container {
            flex: 1; /* Заполняет все доступное пространство */
            overflow: auto; /* Добавляем прокрутку по содержимому контейнера */
            margin-bottom: 10px; /* Отступ снизу для кнопки */
        }

        #save-button {
            margin: 10px;
        }
    </style>
</head>
<body>
    <div class="main">
        <h1>@ViewData["Title"]</h1>
        <div id="handsontable-container"></div>
        <button id="save-button">Сохранить изменения</button>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/handsontable@latest/dist/handsontable.full.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const container = document.getElementById('handsontable-container');
            const saveButton = document.getElementById('save-button');

            // Передаем данные в представление из ViewBag
            const headerColumns = @Html.Raw(ViewBag.HeaderColumns);
            const tableData = @Html.Raw(ViewBag.TableData);
            const nestedHeaders = @Html.Raw(ViewBag.NestedHeaders);

            // Определяем количество строк и фиксированную высоту строк
            const rowHeight = 15; // Установите фиксированную высоту строки, например 15px

            // Устанавливаем фиксированную ширину для столбцов
            const colWidths = headerColumns.map((col, index) => {
                if (index === 0) {
                    return 200; // Ширина первого столбца 200 пикселей
                } else if (index === 1) {
                    return 80; // Ширина второго столбца 80 пикселей
                } else if (index >= 2) {
                    return 30; // Ширина столбцов с днями (индексы от 2 до последнего) 50 пикселей
                } else {
                    return null; // Используйте ширину по умолчанию для остальных столбцов
                }
            });

            // Инициализация Handsontable
            const hot = new Handsontable(container, {
                data: tableData,
                colHeaders: headerColumns,
                rowHeaders: true,
                manualColumnResize: true,
                manualRowResize: true,
                contextMenu: {
                    items: {
                        "remove_col": {
                            name: 'Remove column',
                            callback: function (key, selection) {
                                const selected = selection[0];
                                hot.alter('remove_col', selected.start.col, selected.end.col + 1);
                            }
                        },
                        "remove_row": {
                            name: 'Remove row',
                            callback: function (key, selection) {
                                const selected = selection[0];
                                hot.alter('remove_row', selected.start.row, selected.end.row + 1);
                            }
                        }
                    }
                },
                nestedHeaders: nestedHeaders,
                stretchH: 'all',
                width: '100%',
                height: '100%', // Устанавливаем высоту таблицы на 100% высоты контейнера
                fixedRowsTop: 0,
                fixedColumnsLeft: 2, // Фиксируем первые 2 столбца
                colWidths: colWidths,
                rowHeights: Array(tableData.length).fill(rowHeight), // Устанавливаем высоту всех строк
                licenseKey: 'non-commercial-and-evaluation',
                afterChange: function (changes, source) {
                    if (source === 'loadData') {
                        return; // Don't highlight changes when loading data
                    }
                    changes.forEach(([row, prop, oldValue, newValue]) => {
                        if (oldValue !== newValue) {
                            hot.getCellMeta(row, prop).className = 'highlighted';
                            hot.render();
                        }
                    });
                }
            });

            // Обработка нажатия на кнопку сохранения
            saveButton.addEventListener('click', function () {
                const updatedData = hot.getData();
                fetch('@Url.Action("SaveChanges", "Planer")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': '@(Html.AntiForgeryToken().ToString().Replace("<input name=\"__RequestVerificationToken\" type=\"hidden\" value=\"", "").Replace("\" />", ""))'
                    },
                    body: JSON.stringify(updatedData)
                }).then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            alert('Changes saved successfully');
                        } else {
                            alert('Error saving changes');
                        }
                    }).catch(error => {
                        console.error('Error:', error);
                        alert('Error saving changes');
                    });
            });
        });
    </script>
</body>
</html>
