@model List<TrackingSheet.Models.ProblemTypeStatisticsViewModel>

@{
    ViewData["Title"] = "Выбор года и квартала";
}
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <script src="https://cdn.amcharts.com/lib/5/index.js"></script>
    <script src="https://cdn.amcharts.com/lib/5/percent.js"></script>
    <script src="https://cdn.amcharts.com/lib/5/xy.js"></script>
    <script src="https://cdn.amcharts.com/lib/5/themes/Animated.js"></script>
    <script src="//cdn.amcharts.com/lib/5/themes/Frozen.js"></script>
    <script src="~/js/statistics.js" defer></script>
</head>


<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>


<body>
<h1>
    <label>Статистика инцидентов</label>
</h1>

<section class="table__header">
    <form asp-controller="IncidentsStatistics" asp-action="IncidentsStatistics" method="post" class="table__header">
        <!-- Блок выбора года -->
        <div class="year-group">
            Год
            <svg class="icon_calendar" viewBox="0 0 24 24">
                <path d="M21 10H3M16 2V6M8 2V6M10.5 14L12 13V18M10.75 18H13.25M7.8 22H16.2C17.8802 22 18.7202 22 19.362 21.673C19.9265 21.3854 20.3854 20.9265 20.673 20.362C21 19.7202 21 18.8802 21 17.2V8.8C21 7.11984 21 6.27976 20.673 5.63803C20.3854 5.07354 19.9265 4.6146 19.362 4.32698C18.7202 4 17.8802 4 16.2 4H7.8C6.11984 4 5.27976 4 4.63803 4.32698C4.07354 4.6146 3.6146 5.07354 3.32698 5.63803C3 6.27976 3 7.11984 3 8.8V17.2C3 18.8802 3 19.7202 3.32698 20.362C3.6146 20.9265 4.07354 21.3854 4.63803 21.673C5.27976 22 6.11984 22 7.8 22Z" />
            </svg>
            <input type="number" id="year" name="year" class="form-control" value="@DateTime.Now.Year" required />
        </div>

        <!-- Блок переключения кварталов -->
        <div class="toggle-switch">
            <input type="radio" id="1-quart" name="quarter" value="1" checked>
            <label for="1-quart" class="toggle-label">1-й квартал</label>

            <input type="radio" id="2-quart" name="quarter" value="2">
            <label for="2-quart" class="toggle-label">2-й квартал</label>

            <input type="radio" id="3-quart" name="quarter" value="3">
            <label for="3-quart" class="toggle-label">3-й квартал</label>

            <input type="radio" id="4-quart" name="quarter" value="4">
            <label for="4-quart" class="toggle-label">4-й квартал</label>
        </div>

        <!-- Кнопка отправки формы -->
        <div class="button-container-stat">
            <button type="submit" class="btn btn-primary">Показать статистику</button>
        </div>
    </form>
        <script>
            document.addEventListener("DOMContentLoaded", function () {
                const form = document.getElementById('statisticsForm');
                const yearInput = form.querySelector('#year');
                const quarterInputs = form.querySelectorAll('input[name="quarter"]');

                let barChartInstance = null;
                let pieChartInstance = null;

                function getSelectedQuarter() {
                    for (const input of quarterInputs) {
                        if (input.checked) {
                            return input.value;
                        }
                    }
                    return null;
                }

                function updateTable(data) {
                    const tableBody = document.querySelector('table tbody');
                    if (!tableBody) return; // Проверка наличия таблицы

                    tableBody.innerHTML = '';

                    data.forEach(item => {
                        const row = document.createElement('tr');
                        row.style.lineHeight = '1.2';

                        row.innerHTML = `
                                <td style="padding: 4px; font-weight: bold;">${item.problemType}</td>
                                <td style="padding: 4px;">${item.count}</td>
                                <td style="padding: 4px;">${item.successCount + item.failCount}</td>
                                <td style="padding: 4px;"><p class="status success">${item.successCount}</p></td>
                                <td style="padding: 4px;"><p class="status failed">${item.failCount}</p></td>
                                <td style="padding: 4px;">${item.savedNPTCount}</td>
                            `;

                        tableBody.appendChild(row);
                    });

                    // Добавляем строку "Итого"
                    const totalCount = data.reduce((sum, item) => sum + item.count, 0);
                    const totalSuccessCount = data.reduce((sum, item) => sum + item.successCount, 0);
                    const totalFailCount = data.reduce((sum, item) => sum + item.failCount, 0);
                    const totalSavedNPTCount = data.reduce((sum, item) => sum + item.savedNPTCount, 0);
                    const totalSuccessFailCount = totalSuccessCount + totalFailCount;

                    const totalRow = document.createElement('tr');
                    totalRow.style.lineHeight = '1.2';

                    totalRow.innerHTML = `
                            <td><strong>Итого</strong></td>
                            <td><strong>${totalCount}</strong></td>
                            <td><strong>${totalSuccessFailCount}</strong></td>
                            <td><p class="status success"><strong>${totalSuccessCount}</strong></p></td>
                            <td><p class="status failed"><strong>${totalFailCount}</strong></p></td>
                            <td><strong>${totalSavedNPTCount}</strong></td>
                        `;

                    tableBody.appendChild(totalRow);
                }

                function createCharts(data) {
                    const labels = data.map(stat => stat.problemType.trim());
                    const countData = data.map(stat => stat.count);
                    const successFailData = data.map(stat => stat.successCount + stat.failCount);
                    const savedNPTData = data.map(stat => stat.savedNPTCount);

                    // Уничтожаем предыдущие экземпляры графиков, если они существуют
                    if (barChartInstance) {
                        barChartInstance.destroy();
                    }
                    if (pieChartInstance) {
                        pieChartInstance.destroy();
                    }

                    // Создаем новый график "barChart"
                    const barCtx = document.getElementById('barChart').getContext('2d');
                    barChartInstance = new Chart(barCtx, {
                        type: 'bar',
                        data: {
                            labels: labels,
                            datasets: [
                                {
                                    label: 'Количество обращений, шт',
                                    data: countData,
                                    backgroundColor: 'rgba(153, 102, 255, 0.6)',
                                    borderColor: 'rgba(0, 0, 0, 1)',
                                    borderWidth: 1
                                },
                                {
                                    label: 'Количество закрытых обращений, шт',
                                    data: successFailData,
                                    backgroundColor: 'rgba(0, 0, 128, 0.6)',
                                    borderColor: 'rgba(0, 0, 0, 1)',
                                    borderWidth: 1
                                },
                                {
                                    label: 'Сохраненное НПВ, ч',
                                    data: savedNPTData,
                                    backgroundColor: 'rgba(0, 255, 0, 0.6)',
                                    borderColor: 'rgba(0, 0, 0, 1)',
                                    borderWidth: 1
                                }
                            ]
                        },
                        options: {
                            scales: {
                                y: {
                                    beginAtZero: true
                                }
                            }
                        }
                    });

                    // Создаем новый график "pieChart"
                    const pieCtx = document.getElementById('pieChart').getContext('2d');
                    pieChartInstance = new Chart(pieCtx, {
                        type: 'pie',
                        data: {
                            labels: labels,
                            datasets: [
                                {
                                    data: countData,
                                    backgroundColor: [
                                        'rgba(255, 0, 0, 0.6)',
                                        'rgba(0, 255, 0, 0.6)',
                                        'rgba(0, 0, 255, 0.6)',
                                        'rgba(255, 255, 0, 0.6)',
                                        'rgba(255, 0, 255, 0.6)',
                                        'rgba(0, 255, 255, 0.6)',
                                    ],
                                    borderColor: 'rgba(0, 0, 0, 1)',
                                    borderWidth: 1
                                }
                            ]
                        },
                        options: {
                            responsive: true,
                            plugins: {
                                legend: {
                                    position: 'top',
                                },
                                title: {
                                    display: true,
                                    text: 'Количество обращений по типам проблем',
                                    font: {
                                        family: 'Gilroy-Bold',
                                        size: 16,
                                        weight: 'normal'
                                    }
                                }
                            }
                        }
                    });
                }

                async function fetchData(url) {
                    const response = await fetch(url);
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return await response.json();
                }

                async function updateCharts(attempt = 1) {
                    const year = yearInput.value;
                    const quarter = getSelectedQuarter();

                    if (!year || !quarter) {
                        console.error('Выберите год и квартал!');
                        return;
                    }

                    try {
                        const url = `/IncidentsStatistics/IncidentsStatisticsJson?year=${year}&quarter=${quarter}&timestamp=${new Date().getTime()}`;
                        const data = await fetchData(url);

                        if (data.length === 0) {
                            console.warn(`No data received for year ${year}, quarter ${quarter}`);
                        }

                        updateTable(data);
                        createCharts(data);

                        if (data.length === 0 && attempt < 2) {
                            console.log(`Retrying... Attempt ${attempt + 1}`);
                            setTimeout(() => updateCharts(attempt + 1), 1000);
                        }
                    } catch (error) {
                        console.error('Error fetching data:', error);
                    }
                }

                form.addEventListener('submit', function (event) {
                    event.preventDefault();
                    updateCharts();
                });
            });
        </script>
</section>
    
</body>
