// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TrackingSheet.Data;

#nullable disable

namespace TrackingSheet.Migrations
{
    [DbContext(typeof(MVCDbContext))]
    [Migration("20240908130903_KanbanMigrosBoardCreating")]
    partial class KanbanMigrosBoardCreating
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TrackingSheet.Models.Domain.Incidents", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("HighLight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProblemType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reporter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Run")
                        .HasColumnType("int");

                    b.Property<long>("SavedNPT")
                        .HasColumnType("bigint");

                    b.Property<string>("Shift")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Solution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VSAT")
                        .HasColumnType("int");

                    b.Property<string>("Well")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("IncidentList");
                });

            modelBuilder.Entity("TrackingSheet.Models.Kanban.KanbanBoard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Board")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("KanbanBoards");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d6b8e802-6fc0-4765-a1b9-2ee559cd1500"),
                            Board = "Default Board",
                            CreatedAt = new DateTime(2024, 9, 8, 13, 9, 1, 290, DateTimeKind.Utc).AddTicks(8740)
                        });
                });

            modelBuilder.Entity("TrackingSheet.Models.Kanban.KanbanColumn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Column")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColumnColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("KanbanBoardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KanbanBoardId");

                    b.ToTable("KanbanColumns");
                });

            modelBuilder.Entity("TrackingSheet.Models.Kanban.KanbanComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CommentAuthor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("KanbanTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("KanbanTaskId");

                    b.ToTable("KanbanComments");
                });

            modelBuilder.Entity("TrackingSheet.Models.Kanban.KanbanMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("KanbanMembers");
                });

            modelBuilder.Entity("TrackingSheet.Models.Kanban.KanbanSubtask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("KanbanTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SubtaskDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("KanbanTaskId");

                    b.ToTable("KanbanSubtasks");
                });

            modelBuilder.Entity("TrackingSheet.Models.Kanban.KanbanTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("KanbanColumnId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Priority")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskAuthor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("KanbanColumnId");

                    b.ToTable("KanbanTasks");
                });

            modelBuilder.Entity("TrackingSheet.Models.Kanban.KanbanTaskMember", b =>
                {
                    b.Property<Guid>("KanbanTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("KanbanMemberId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("KanbanTaskId", "KanbanMemberId");

                    b.HasIndex("KanbanMemberId");

                    b.ToTable("KanbanTaskMembers");
                });

            modelBuilder.Entity("TrackingSheet.Models.RO_Planer.EmployeePlaner2024", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("April")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("August")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("December")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("February")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("January")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("July")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("June")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("March")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("May")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("November")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("October")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("September")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeePlaner2024");
                });

            modelBuilder.Entity("TrackingSheet.Models.RO_Planer.ROemployees", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stol")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ROemployees");
                });

            modelBuilder.Entity("TrackingSheet.Models.Kanban.KanbanColumn", b =>
                {
                    b.HasOne("TrackingSheet.Models.Kanban.KanbanBoard", "KanbanBoard")
                        .WithMany("Columns")
                        .HasForeignKey("KanbanBoardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("KanbanBoard");
                });

            modelBuilder.Entity("TrackingSheet.Models.Kanban.KanbanComment", b =>
                {
                    b.HasOne("TrackingSheet.Models.Kanban.KanbanTask", "KanbanTask")
                        .WithMany("Comments")
                        .HasForeignKey("KanbanTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KanbanTask");
                });

            modelBuilder.Entity("TrackingSheet.Models.Kanban.KanbanSubtask", b =>
                {
                    b.HasOne("TrackingSheet.Models.Kanban.KanbanTask", "KanbanTask")
                        .WithMany("Subtasks")
                        .HasForeignKey("KanbanTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KanbanTask");
                });

            modelBuilder.Entity("TrackingSheet.Models.Kanban.KanbanTask", b =>
                {
                    b.HasOne("TrackingSheet.Models.Kanban.KanbanColumn", null)
                        .WithMany("Tasks")
                        .HasForeignKey("KanbanColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TrackingSheet.Models.Kanban.KanbanTaskMember", b =>
                {
                    b.HasOne("TrackingSheet.Models.Kanban.KanbanMember", "KanbanMember")
                        .WithMany("TaskMembers")
                        .HasForeignKey("KanbanMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrackingSheet.Models.Kanban.KanbanTask", "KanbanTask")
                        .WithMany("TaskMembers")
                        .HasForeignKey("KanbanTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KanbanMember");

                    b.Navigation("KanbanTask");
                });

            modelBuilder.Entity("TrackingSheet.Models.RO_Planer.EmployeePlaner2024", b =>
                {
                    b.HasOne("TrackingSheet.Models.RO_Planer.ROemployees", "ROemployees")
                        .WithMany("PlanerEntries")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ROemployees");
                });

            modelBuilder.Entity("TrackingSheet.Models.Kanban.KanbanBoard", b =>
                {
                    b.Navigation("Columns");
                });

            modelBuilder.Entity("TrackingSheet.Models.Kanban.KanbanColumn", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("TrackingSheet.Models.Kanban.KanbanMember", b =>
                {
                    b.Navigation("TaskMembers");
                });

            modelBuilder.Entity("TrackingSheet.Models.Kanban.KanbanTask", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Subtasks");

                    b.Navigation("TaskMembers");
                });

            modelBuilder.Entity("TrackingSheet.Models.RO_Planer.ROemployees", b =>
                {
                    b.Navigation("PlanerEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
