// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TrackingSheet.Data;

#nullable disable

namespace TrackingSheet.Migrations
{
    [DbContext(typeof(MVCDbContext))]
    [Migration("20240802102729_InternalMigration")]
    partial class InternalMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TrackingSheet.Models.Domain.Incidents", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("HighLight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProblemType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reporter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Run")
                        .HasColumnType("int");

                    b.Property<long>("SavedNPT")
                        .HasColumnType("bigint");

                    b.Property<string>("Shift")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Solution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VSAT")
                        .HasColumnType("int");

                    b.Property<string>("Well")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("IncidentList");
                });

            modelBuilder.Entity("TrackingSheet.Models.RO_Planer.EmployeePlaner2024", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("April")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("August")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("December")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("February")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("January")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("July")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("June")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("March")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("May")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("November")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("October")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("September")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeePlaner2024");
                });

            modelBuilder.Entity("TrackingSheet.Models.RO_Planer.ROemployees", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stol")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ROemployees");
                });

            modelBuilder.Entity("TrackingSheet.Models.RO_Planer.EmployeePlaner2024", b =>
                {
                    b.HasOne("TrackingSheet.Models.RO_Planer.ROemployees", "ROemployees")
                        .WithMany("PlanerEntries")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ROemployees");
                });

            modelBuilder.Entity("TrackingSheet.Models.RO_Planer.ROemployees", b =>
                {
                    b.Navigation("PlanerEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
